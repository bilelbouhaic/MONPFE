// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240514171352_migration116")]
    partial class migration116
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.DeclarationRedevance", b =>
                {
                    b.Property<int>("idDeclaration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDeclaration"));

                    b.Property<float>("BaseRdv")
                        .HasColumnType("real");

                    b.Property<float>("TauxRdv")
                        .HasColumnType("real");

                    b.Property<DateOnly>("dateRdv")
                        .HasColumnType("date");

                    b.Property<float>("montantRdv")
                        .HasColumnType("real");

                    b.Property<int>("perimetreId")
                        .HasColumnType("int");

                    b.Property<string>("typeRdv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idDeclaration");

                    b.HasIndex("perimetreId");

                    b.ToTable("declarationRedevances");
                });

            modelBuilder.Entity("api.Models.Investissement", b =>
                {
                    b.Property<int>("idInvest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idInvest"));

                    b.Property<DateTime>("dateInvet")
                        .HasColumnType("datetime2");

                    b.Property<float>("montantInvest")
                        .HasColumnType("real");

                    b.Property<string>("typeInvest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idInvest");

                    b.ToTable("investissements");
                });

            modelBuilder.Entity("api.Models.Monnaie", b =>
                {
                    b.Property<int>("idMonnaie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idMonnaie"));

                    b.Property<DateTime>("dateModificationMonnaie")
                        .HasColumnType("datetime2");

                    b.Property<float>("tauxChange")
                        .HasColumnType("real");

                    b.HasKey("idMonnaie");

                    b.ToTable("monnaies");
                });

            modelBuilder.Entity("api.Models.Perimetre", b =>
                {
                    b.Property<int>("idPerimetre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPerimetre"));

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<bool>("associative")
                        .HasColumnType("bit");

                    b.Property<string>("nomPerimetre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("qteGaz")
                        .HasColumnType("real");

                    b.Property<int>("wilaya")
                        .HasColumnType("int");

                    b.HasKey("idPerimetre");

                    b.HasIndex("ZoneId");

                    b.ToTable("perimetres");
                });

            modelBuilder.Entity("api.Models.PrixBase", b =>
                {
                    b.Property<int>("idPb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPb"));

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateModificationPb")
                        .HasColumnType("datetime2");

                    b.Property<float>("prixBase")
                        .HasColumnType("real");

                    b.HasKey("idPb");

                    b.HasIndex("ProduitId");

                    b.ToTable("prixBases");
                });

            modelBuilder.Entity("api.Models.PrixMn", b =>
                {
                    b.Property<int>("idPMn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPMn"));

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("datemodificationPmn")
                        .HasColumnType("datetime2");

                    b.Property<float>("prixMn")
                        .HasColumnType("real");

                    b.HasKey("idPMn");

                    b.HasIndex("ProduitId");

                    b.ToTable("prixMns");
                });

            modelBuilder.Entity("api.Models.Production", b =>
                {
                    b.Property<int>("idRdv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRdv"));

                    b.Property<float>("CoutTransport")
                        .HasColumnType("real");

                    b.Property<float>("ProductionValorise")
                        .HasColumnType("real");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("dateRdv")
                        .HasColumnType("date");

                    b.Property<int>("perimetreId")
                        .HasColumnType("int");

                    b.Property<string>("typeRdv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRdv");

                    b.HasIndex("ProduitId");

                    b.HasIndex("perimetreId");

                    b.ToTable("redevances");
                });

            modelBuilder.Entity("api.Models.Produit", b =>
                {
                    b.Property<int>("idProduit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idProduit"));

                    b.Property<string>("nomProduit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idProduit");

                    b.ToTable("produits");
                });

            modelBuilder.Entity("api.Models.TarifTransport", b =>
                {
                    b.Property<int>("idTt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTt"));

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateModificationTt")
                        .HasColumnType("datetime2");

                    b.Property<float>("tarifTransport")
                        .HasColumnType("real");

                    b.HasKey("idTt");

                    b.HasIndex("ProduitId");

                    b.ToTable("tarifTransports");
                });

            modelBuilder.Entity("api.Models.Trp", b =>
                {
                    b.Property<int>("idTrp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTrp"));

                    b.Property<float>("TauxTrp")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateTrp")
                        .HasColumnType("datetime2");

                    b.Property<float>("montantTrp")
                        .HasColumnType("real");

                    b.Property<int>("productionidRdv")
                        .HasColumnType("int");

                    b.HasKey("idTrp");

                    b.HasIndex("productionidRdv");

                    b.ToTable("trps");
                });

            modelBuilder.Entity("api.Models.Zone", b =>
                {
                    b.Property<int>("idZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idZone"));

                    b.Property<string>("localisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idZone");

                    b.ToTable("zones");
                });

            modelBuilder.Entity("api.Models.DeclarationRedevance", b =>
                {
                    b.HasOne("api.Models.Perimetre", "perimetre")
                        .WithMany()
                        .HasForeignKey("perimetreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("perimetre");
                });

            modelBuilder.Entity("api.Models.Perimetre", b =>
                {
                    b.HasOne("api.Models.Zone", "zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("zone");
                });

            modelBuilder.Entity("api.Models.PrixBase", b =>
                {
                    b.HasOne("api.Models.Produit", "Produit")
                        .WithMany("prixBases")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("api.Models.PrixMn", b =>
                {
                    b.HasOne("api.Models.Produit", "Produit")
                        .WithMany("PrixMns")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("api.Models.Production", b =>
                {
                    b.HasOne("api.Models.Produit", "produit")
                        .WithMany()
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Perimetre", "perimetre")
                        .WithMany()
                        .HasForeignKey("perimetreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("perimetre");

                    b.Navigation("produit");
                });

            modelBuilder.Entity("api.Models.TarifTransport", b =>
                {
                    b.HasOne("api.Models.Produit", "Produit")
                        .WithMany("tarifTransports")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("api.Models.Trp", b =>
                {
                    b.HasOne("api.Models.Production", "production")
                        .WithMany()
                        .HasForeignKey("productionidRdv")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("production");
                });

            modelBuilder.Entity("api.Models.Produit", b =>
                {
                    b.Navigation("PrixMns");

                    b.Navigation("prixBases");

                    b.Navigation("tarifTransports");
                });
#pragma warning restore 612, 618
        }
    }
}
